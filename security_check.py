#!/usr/bin/env python3
"""
Security Status Check for PC_AgentWithClaude
Verifies API key protection and security measures
"""

import os
import json
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

console = Console()

def check_security_status():
    """Check comprehensive security status"""
    console.print(Panel.fit("üîí PC_AgentWithClaude Security Status Check", style="bold blue"))
    
    security_checks = []
    
    # Check 1: .gitignore protection
    gitignore_path = Path(".gitignore")
    gitignore_content = ""
    if gitignore_path.exists():
        with open(gitignore_path) as f:
            gitignore_content = f.read()
        
        if "config.json" in gitignore_content:
            security_checks.append(("Git Protection", "‚úÖ", "config.json ignored by git"))
        else:
            security_checks.append(("Git Protection", "‚ùå", "config.json NOT protected"))
    
    # Check 2: .env file protection
    if ".env" in gitignore_content:
        security_checks.append((".env Protection", "‚úÖ", ".env file ignored by git"))
    else:
        security_checks.append((".env Protection", "‚ùå", ".env NOT protected"))
    
    # Check 3: config.json API key status  
    config_path = Path("config.json")
    if config_path.exists():
        with open(config_path) as f:
            config = json.load(f)
        
        api_key = config.get("anthropic_api_key", "")
        if api_key == "your-claude-api-key-here":
            security_checks.append(("config.json API Key", "‚úÖ", "Using placeholder (secure)"))
        elif api_key.startswith("sk-ant-"):
            security_checks.append(("config.json API Key", "‚ö†Ô∏è", "Real key in config.json (move to .env)"))
        else:
            security_checks.append(("config.json API Key", "‚ùì", "Unknown key format"))
    
    # Check 4: .env file setup
    env_path = Path(".env")
    if env_path.exists():
        security_checks.append((".env File", "‚úÖ", ".env file exists"))
        
        # Check if .env has real API key
        with open(env_path) as f:
            env_content = f.read()
        
        # Look for real API key pattern (starts with sk-ant-api03-)
        if "sk-ant-api03-" in env_content and len([line for line in env_content.split('\n') if line.startswith('ANTHROPIC_API_KEY=sk-ant-api03-')]) > 0:
            security_checks.append((".env API Key", "‚úÖ", "Real API key configured (secure)"))
        elif "sk-ant-" in env_content:
            security_checks.append((".env API Key", "‚úÖ", "API key configured (secure)"))
        else:
            security_checks.append((".env API Key", "‚ö†Ô∏è", "No real API key in .env yet"))
    else:
        security_checks.append((".env File", "‚ùå", ".env file missing"))
    
    # Check 5: Git status
    import subprocess
    try:
        result = subprocess.run(['git', 'check-ignore', 'config.json'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            security_checks.append(("Git Ignore Test", "‚úÖ", "config.json properly ignored"))
        else:
            security_checks.append(("Git Ignore Test", "‚ùå", "config.json NOT ignored"))
    except:
        security_checks.append(("Git Ignore Test", "‚ùì", "Cannot test git ignore"))
    
    # Display results
    table = Table(title="üîí Security Protection Status")
    table.add_column("Security Check", style="cyan")
    table.add_column("Status", justify="center", width=8)
    table.add_column("Details", style="dim")
    
    for check, status, details in security_checks:
        table.add_row(check, status, details)
    
    console.print(table)
    
    # Security recommendations
    console.print(Panel.fit("üõ°Ô∏è Security Recommendations", style="bold yellow"))
    
    recommendations = [
        "‚úÖ Keep API keys in .env file (already protected by .gitignore)",
        "‚úÖ Use placeholder values in config.json", 
        "‚úÖ Never commit real API keys to git",
        "‚úÖ Regularly rotate your API keys",
        "‚úÖ Use environment variables in production",
        "‚úÖ Enable pre-commit hooks for additional protection"
    ]
    
    for rec in recommendations:
        console.print(f"   {rec}")
    
    # Show proper setup
    console.print(Panel.fit("üîß Proper API Key Setup", style="bold green"))
    console.print("1. Edit .env file:")
    console.print("   [dim]ANTHROPIC_API_KEY=sk-ant-api03-your-real-key-here[/]")
    console.print()
    console.print("2. Keep config.json with placeholder:")
    console.print("   [dim]\"anthropic_api_key\": \"your-claude-api-key-here\"[/]")
    console.print()
    console.print("3. The system will automatically use .env when available")

def main():
    check_security_status()

if __name__ == "__main__":
    main()